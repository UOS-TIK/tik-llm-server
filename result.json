{
  "techStack": [
    "프레임워크: 스프링부트와 JPA를 사용하여 안정적이고 확장 가능한 백엔드 개발 환경을 구축합니다.",
    "데이터베이스: MySQL 데이터베이스를 활용하여 데이터의 영구적 저장 및 관리를 수행하며, JPA를 통한 ORM을 활용하여 데이터 접근 레이어를 개발합니다.",
    "API 개발: RESTful API를 디자인하고 개발하여 클라이언트와의 데이터 통신을 지원하며, Swagger를 사용하여 API 문서화를 수행합니다.",
    "테스팅: JUnit과 Mockito를 활용한 단위 테스트와 통합 테스트를 통해 코드의 품질을 유지하고 신뢰성을 확보합니다."
  ],
  "jobDescription": [
    "Framework: Spring Boot / Spring MVC / Spring Webflux / Spring Security / Spring Cloud",
    "Data: JPA / R2DBC / Spring Data JDBC / MySQL / Redis / ElasticSearch / S3",
    "Test: JUnit5 / Spring Test / TestContainers",
    "CI/CD: Git / GitHub Actions / Jenkins / ArgoCD",
    "Operation: Prometheus / Grafana / Sentry / ELK",
    "Infra: k8s + Istio / Nginx / Kafka / AWS",
    "Architecture: MSA, Clean, Hexagonal"
  ],
  "questions": [
    "스프링부트와 JPA를 사용하여 백엔드 개발 환경을 구축할 때, 어떤 전략을 사용하여 확장 가능성을 보장하나요?",
    "RESTful API를 디자인하고 개발할 때, 어떤 기준을 가지고 설계하나요? 그리고 Swagger를 사용하여 API 문서화를 수행하는 과정을 설명해주실 수 있나요?",
    "JUnit과 Mockito를 활용한 단위 테스트와 통합 테스트를 통해 코드의 품질을 유지하고 신뢰성을 확보하는 방법에 대해 설명해주실 수 있나요?"
  ],
  "interviewHistory": [
    "면접관: 안녕하세요. 먼저, 저희 회사에 지원해주셔서 감사드리며 오늘 면접 잘 부탁드리겠습니다.",
    "지원자: 네 저도 잘부탁드리겠습니다",
    "면접관: 그럼 본론으로 들어가보겠습니다. 스프링부트와 JPA를 사용하여 백엔드 개발 환경을 구축할 때, 어떤 전략을 사용하여 확장 가능성을 보장하시나요?",
    "지원자: 네 스프링 부트와 JPA를 사용하여 백엔드를 구축할 때, 미리 정의된 도메인 모델을 사용하고 데이터 베이스 정규화를 철저하게 합니다",
    "면접관: 데이터베이스 정규화와 도메인 모델을 사용하는 것은 확장 가능한 백엔드를 구축하는데 중요한 전략입니다. 그러나 이외에도 성능 향상, 코드의 재사용성, 유지 보수성 등을 고려해야 합니다. 그럼 추가로 질문드리겠습니다. 데이터베이스 정규화 외에 어떤 방법을 사용하여 성능을 향상시키시나요?",
    "지원자: 인덱스 생성, 캐싱, 슬로우 쿼리 개선으로 성능 향상이 가능합니다",
    "면접관: 성능 향상을 위한 다양한 전략을 알고 계시는군요. 이는 백엔드 개발에서 중요한 부분입니다. 그럼 다음으로, 코드의 재사용성과 유지 보수성을 높이기 위해 어떤 전략을 사용하시나요?",
    "지원자: 모듈화를 통해 코드를 작은 모듈 또는 컴포넌트로 분할하여 각 부분을 독립적으로 관리하고 재사용합니다.",
    "면접관: 코드의 모듈화는 재사용성과 유지 보수성을 높이는 좋은 방법입니다. 이를 통해 코드의 복잡성을 줄이고 가독성을 높일 수 있습니다. 그럼 다음으로, 스프링 부트와 JPA를 사용할 때, 어떤 문제점이 있었나요? 그 문제를 어떻게 해결하였나요?",
    "지원자: JPA의 N+1문제가 있고 저는 이를 fetch join 및 batch size option을 통해 n개의 쿼리를 1개의 IN 쿼리로 바꾸어 해결했습니다.",
    "면접관: JPA의 N+1 문제를 인지하고 적절한 해결책을 찾아 적용한 점이 인상적입니다. 이러한 문제 해결 능력은 개발자로서 중요한 역량입니다. 그럼 다음 주제로 넘어가겠습니다. RESTful API를 디자인하고 개발할 때, 어떤 기준을 가지고 설계하나요? 그리고 Swagger를 사용하여 API 문서화를 수행하는 과정을 설명해주실 수 있나요?",
    "지원자: resfulAPI에서 도메인에 맞게 aggregate를 분리하는것을 중요하게 생각합니다. swagger는 spring-doc을 사용했습니다",
    "면접관: RESTful API를 설계할 때, 어떤 방식으로 도메인을 분리하나요? 구체적인 예시를 들어주실 수 있나요?",
    "지원자: company와 user가 1:N 관계라고 할때 company를 조회할때 user 정보를 포함시킬지 말지 고민이 될 수 있습니다. 이떄 user 정보를 포함하지 않는것을 저는 도메인을 분리한다고 표현합니다. 이는 경우마다 다를 수 있고 별도로 user를 조화하는 api가 필요하기 때문에 클라이언트에서는 여러번의 요청을 해야하는 불편함도 있습니다.",
    "면접관: 도메인을 분리하는 기준에 대해 잘 설명하였습니다. 이를 통해 클라이언트의 요청을 최소화하고, 서버의 부하를 줄이는 방법을 잘 이해하고 계신 것 같습니다. 그럼, Swagger를 사용하여 API 문서화를 할 때, 어떤 점을 중요하게 생각하나요?",
    "지원자: type-safety입니다. 예를들어 userRole이라는 필드가 있을때 필드의 값은 admin, member, vip입니다. 이때 type을 string으로 설정하는것이 아닌 enum으로 설정하는것이 있습니다",
    "면접관: Swagger를 사용하여 API 문서화를 수행한 경험 중 가장 어려웠던 점은 무엇이었나요?",
    "지원자: 코드와 swagger docs의 불일치입니다. 코드가 바뀌면 마찬가지로 docs도 동기화 되어야하는데 이것을 유지하는것이 힘들었습니다.",
    "면접관: API 문서화를 유지하는 것은 실제로 많은 노력이 필요한 작업입니다. 이에 대한 이해와 경험을 가지고 계신 것은 좋은 점입니다. 그럼 다음 주제로 넘어가겠습니다. JUnit과 Mockito를 활용한 단위 테스트와 통합 테스트를 통해 코드의 품질을 유지하고 신뢰성을 확보하는 방법에 대해 설명해주실 수 있나요?",
    "지원자: 테스트코드는 리팩토링이나 기능 변화에 있어 필수적인 요소입니다. 저는 주요 로직을 담고있는 service레이어만 테스트코드를 작성하고 있고, 구체적으로는 생성자로부터 주입받는 요소를 mocking해서 유닛테스트를 하고 있습니다",
    "면접관: 테스트 코드 작성에 대한 이해도가 높아 보입니다. 그럼, Mockito를 사용하여 테스트를 작성할 때 어떤 경우에 실제 객체 대신 Mock 객체를 사용하나요?",
    "지원자: 저는 생성자로 부터 주입받는 요소를 mock 객체를 사용합니다. 다른 의미로는 외부 의존성을 갖는 요소라고 말할수 있을것 같습니다.",
    "면접관: 외부 의존성을 갖는 요소를 Mocking 하는 것은 테스트의 격리를 위해 중요하다는 점을 잘 이해하고 계신 것 같습니다. 그럼, 통합 테스트와 단위 테스트의 차이점과 각각의 중요성에 대해 설명해주실 수 있나요?",
    "지원자: 유닛테스트는 외부 의존성을 mocking을 이용하거나 제거해 단일 레이어의 로직만을 테스트하는 것입니다. 반대로 통합테스트는 외부 의존성을 제거하지 않는 테스트입니다. 유닛테스트는 db 연결과 같은 작업이 필요 없기때문에 빠르고, 순수 로직만 테스트 가능하고 비교적 작성하기 쉽습니다. 그렇지만 이는 실제 서비스는 db연결과 같은 외부 의존성이 필요하기 때문에 유닛테스트만으로는 충분한 테스트라고 보기 어렵습니다. 그렇기 때문에 통합테스틀 하는 것입니다.",
    "면접관: 테스트 코드를 작성할 때 어떤 기준으로 테스트 케이스를 선정하나요?",
    "지원자: 프로젝트 매니저와 기획팀원들과 테스트 케이스를 함꼐 고민합니다. 보통 성공케이스와 실패케이스를 반드시 하나이상 선정합니다. 실패 케이스는 validation, auth, 기타 요구사항 등등 경우에따라 다릅니다.",
    "면접관: 테스트 케이스 선정에 있어서 팀과의 협업의 중요성을 잘 이해하고 있으시며, 성공 케이스와 실패 케이스를 모두 고려하는 것은 테스트의 완전성을 보장하는 데 중요하다는 점을 잘 알고 계신 것 같습니다. 이상으로 면접을 마무리하겠습니다. 오늘 면접에 참석해주셔서 감사합니다."
  ],
  "interviewPaper": [
    {
      "question": "스프링부트와 JPA를 사용하여 백엔드 개발 환경을 구축할 때, 어떤 전략을 사용하여 확장 가능성을 보장하나요?",
      "answer": "네 스프링 부트와 JPA를 사용하여 백엔드를 구축할 때, 미리 정의된 도메인 모델을 사용하고 데이터 베이스 정규화를 철저하게 합니다",
      "comment": "데이터베이스 정규화와 도메인 모델을 사용하는 것은 확장 가능한 백엔드를 구축하는데 중요한 전략입니다. 그러나 이외에도 성능 향상, 코드의 재사용성, 유지 보수성 등을 고려해야 합니다.",
      "score": 7,
      "tailQuestions": [
        {
          "question": "데이터베이스 정규화 외에 어떤 방법을 사용하여 성능을 향상시키나요?",
          "answer": "인덱스 생성, 캐싱, 슬로우 쿼리 개선으로 성능 향상이 가능합니다",
          "comment": "성능 향상을 위한 다양한 전략을 알고 계시는군요. 이는 백엔드 개발에서 중요한 부분입니다.",
          "score": 8
        },
        {
          "question": "코드의 재사용성과 유지 보수성을 높이기 위해 어떤 전략을 사용하나요?",
          "answer": "모듈화를 통해 코드를 작은 모듈 또는 컴포넌트로 분할하여 각 부분을 독립적으로 관리하고 재사용합니다.",
          "comment": "코드의 모듈화는 재사용성과 유지 보수성을 높이는 좋은 방법입니다. 이를 통해 코드의 복잡성을 줄이고 가독성을 높일 수 있습니다.",
          "score": 8
        },
        {
          "question": "스프링 부트와 JPA를 사용할 때, 어떤 문제점이 있었나요? 그 문제를 어떻게 해결하였나요?",
          "answer": "JPA의 N+1문제가 있고 저는 이를 fetch join 및 batch size option을 통해 n개의 쿼리를 1개의 IN 쿼리로 바꾸어 해결했습니다.",
          "comment": "JPA의 N+1 문제를 인지하고 적절한 해결책을 찾아 적용한 점이 인상적입니다. 이러한 문제 해결 능력은 개발자로서 중요한 역량입니다.",
          "score": 9
        }
      ],
      "isCompleted": true
    },
    {
      "question": "RESTful API를 디자인하고 개발할 때, 어떤 기준을 가지고 설계하나요? 그리고 Swagger를 사용하여 API 문서화를 수행하는 과정을 설명해주실 수 있나요?",
      "answer": "resfulAPI에서 도메인에 맞게 aggregate를 분리하는것을 중요하게 생각합니다. swagger는 spring-doc을 사용했습니다",
      "comment": "도메인에 맞게 aggregate를 분리하는 것은 RESTful API 설계에 있어 중요한 부분입니다. 또한, Swagger를 통한 API 문서화 경험도 좋습니다.",
      "score": 8,
      "tailQuestions": [
        {
          "question": "RESTful API를 설계할 때, 어떤 방식으로 도메인을 분리하나요? 구체적인 예시를 들어주실 수 있나요?",
          "answer": "company와 user가 1:N 관계라고 할때 company를 조회할때 user 정보를 포함시킬지 말지 고민이 될 수 있습니다. 이떄 user 정보를 포함하지 않는것을 저는 도메인을 분리한다고 표현합니다. 이는 경우마다 다를 수 있고 별도로 user를 조화하는 api가 필요하기 때문에 클라이언트에서는 여러번의 요청을 해야하는 불편함도 있습니다.",
          "comment": "도메인을 분리하는 기준에 대해 잘 설명하였습니다. 이를 통해 클라이언트의 요청을 최소화하고, 서버의 부하를 줄이는 방법을 잘 이해하고 계신 것 같습니다.",
          "score": 8
        },
        {
          "question": "Swagger를 사용하여 API 문서화를 할 때, 어떤 점을 중요하게 생각하나요?",
          "answer": "type-safety입니다. 예를들어 userRole이라는 필드가 있을때 필드의 값은 admin, member, vip입니다. 이때 type을 string으로 설정하는것이 아닌 enum으로 설정하는것이 있습니다",
          "comment": "Type-safety에 대한 이해와 이를 문서화에 적용하는 것은 매우 중요합니다. 이를 통해 API 사용자가 예상치 못한 오류를 방지하고, 개발자가 API를 더 쉽게 이해하고 사용할 수 있습니다.",
          "score": 8
        },
        {
          "question": "Swagger를 사용하여 API 문서화를 수행한 경험 중 가장 어려웠던 점은 무엇이었나요?",
          "answer": "코드와 swagger docs의 불일치입니다. 코드가 바뀌면 마찬가지로 docs도 동기화 되어야하는데 이것을 유지하는것이 힘들었습니다.",
          "comment": "API 문서화를 유지하는 것은 실제로 많은 노력이 필요한 작업입니다. 이에 대한 이해와 경험을 가지고 계신 것은 좋은 점입니다.",
          "score": 8
        }
      ],
      "isCompleted": true
    },
    {
      "question": "JUnit과 Mockito를 활용한 단위 테스트와 통합 테스트를 통해 코드의 품질을 유지하고 신뢰성을 확보하는 방법에 대해 설명해주실 수 있나요?",
      "answer": "테스트코드는 리팩토링이나 기능 변화에 있어 필수적인 요소입니다. 저는 주요 로직을 담고있는 service레이어만 테스트코드를 작성하고 있고, 구체적으로는 생성자로부터 주입받는 요소를 mocking해서 유닛테스트를 하고 있습니다",
      "comment": "지원자는 테스트 코드의 중요성과 그의 작성 방법에 대해 잘 이해하고 있는 것 같습니다. 그러나, 테스트 코드를 작성하는 범위와 Mockito를 활용한 테스트에 대한 더 깊은 이해가 필요해 보입니다.",
      "score": 7,
      "tailQuestions": [
        {
          "question": "Mockito를 사용하여 테스트를 작성할 때 어떤 경우에 실제 객체 대신 Mock 객체를 사용하나요?",
          "answer": "저는 생성자로 부터 주입받는 요소를 mock 객체를 사용합니다. 다른 의미로는 외부 의존성을 갖는 요소라고 말할수 있을것 같습니다.",
          "comment": "Mock 객체를 사용하는 경우에 대해 잘 이해하고 있습니다. 외부 의존성을 갖는 요소를 Mocking 하는 것은 테스트의 격리를 위해 중요합니다.",
          "score": 8
        },
        {
          "question": "통합 테스트와 단위 테스트의 차이점과 각각의 중요성에 대해 설명해주실 수 있나요?",
          "answer": "유닛테스트는 외부 의존성을 mocking을 이용하거나 제거해 단일 레이어의 로직만을 테스트하는 것입니다. 반대로 통합테스트는 외부 의존성을 제거하지 않는 테스트입니다. 유닛테스트는 db 연결과 같은 작업이 필요 없기때문에 빠르고, 순수 로직만 테스트 가능하고 비교적 작성하기 쉽습니다. 그렇지만 이는 실제 서비스는 db연결과 같은 외부 의존성이 필요하기 때문에 유닛테스트만으로는 충분한 테스트라고 보기 어렵습니다. 그렇기 때문에 통합테스틀 하는 것입니다.",
          "comment": "지원자는 통합 테스트와 단위 테스트의 차이점과 각각의 중요성에 대해 잘 이해하고 있습니다. 이는 테스트 전략을 세우고 실행하는 데 중요한 요소입니다.",
          "score": 9
        },
        {
          "question": "테스트 코드를 작성할 때 어떤 기준으로 테스트 케이스를 선정하나요?",
          "answer": "프로젝트 매니저와 기획팀원들과 테스트 케이스를 함꼐 고민합니다. 보통 성공케이스와 실패케이스를 반드시 하나이상 선정합니다. 실패 케이스는 validation, auth, 기타 요구사항 등등 경우에따라 다릅니다.",
          "comment": "지원자는 테스트 케이스 선정에 있어서 팀과의 협업의 중요성을 잘 이해하고 있습니다. 성공 케이스와 실패 케이스를 모두 고려하는 것은 테스트의 완전성을 보장하는 데 중요합니다.",
          "score": 8
        }
      ],
      "isCompleted": true
    }
  ]
}
