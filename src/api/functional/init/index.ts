/**
 * @packageDocumentation
 * @module api.functional.init
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, IPropagation, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { InitInterviewData, InitInterviewException, InitInterviewView } from "../../../primary/init-interview/init-interview.data";

/**
 * 면접 시작 하기.
 * 
 * @tag Interview
 * @security secret
 * @param data req body
 * @return response type
 * @throws 400
 * 
 * @controller AppController.initInterview
 * @path POST /init
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function initInterview(
    connection: IConnection,
    data: initInterview.Input,
): Promise<initInterview.Output> {
    return PlainFetcher.propagate(
        {
            ...connection,
            headers: {
                ...(connection.headers ?? {}),
                "Content-Type": "application/json",
            },
        },
        {
            ...initInterview.METADATA,
            path: initInterview.path(),
        } as const,
        data,
    );
}
export namespace initInterview {
    export type Input = Primitive<InitInterviewData>;
    export type Output = IPropagation<{
        201: InitInterviewView;
        400: InitInterviewException;
    }>;

    export const METADATA = {
        method: "POST",
        path: "/init",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/init`;
    }
}